package uk.fictitiousurl.contactmanager;

import java.io.Serializable;
import java.util.Calendar;
import java.util.Set;

/**
 * "A meeting that was held in the past. It includes your notes about what
 * happened and what was agreed."
 * 
 * @author Oliver Smart {@literal <osmart01@dcs.bbk.ac.uk>}
 * @since 28 February 2015
 */
public class PastMeetingImpl extends MeetingImpl implements PastMeeting,
		Serializable {

	/**
	 * Needed for Serializable to throw an error if decoding a previous
	 * incompatible version. Need to increment if this class is changed so it is
	 * not backwards compatible with its previous version.
	 */
	private static final long serialVersionUID = 1L;

	private String notes;

	/**
	 * 
	 * Constructor for Meeting
	 * 
	 * @param contacts
	 *            list of the participating contact or contacts
	 * @param date
	 *            the scheduled date of the meeting (or when it occurred).
	 * @param notes
	 *            notes about what happened and what was agreed
	 *
	 * @throws NullPointerException
	 *             if any input parameter is null.
	 * @throws IllegalArgumentException
	 *             if supplied with an empty set of contacts
	 */
	public PastMeetingImpl(Set<Contact> contacts, Calendar date, String notes) {
		super(contacts, date);
		addNotes(notes);
	}

	public PastMeetingImpl(int id, Set<Contact> contacts, Calendar date,
			String notes) {
		super(id, contacts, date);
		addNotes(notes);
	}

	@Override
	public String getNotes() {
		return notes;
	}

	/**
	 * Add notes to an existing past meeting
	 * 
	 * @param notes
	 *            detailing what happened and what was agreed
	 */
	public void addNotes(String notes) {
		if (notes == null)
			throw new NullPointerException("null notes is not allowed.");
		this.notes = notes;
	}

	@Override
	public String toString() {
		return super.toString() + ", meeting_notes= '" + notes + "'";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() { // generated by eclipse
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((notes == null) ? 0 : notes.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) { // generated by eclipse
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (!(obj instanceof PastMeetingImpl))
			return false;
		PastMeetingImpl other = (PastMeetingImpl) obj;
		if (notes == null) {
			if (other.notes != null)
				return false;
		} else if (!notes.equals(other.notes))
			return false;
		return true;
	}

}
